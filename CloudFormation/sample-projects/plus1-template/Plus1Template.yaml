AWSTemplateFormatVersion: "2010-09-09"

Description: Infrastrcuture orchestrated for a non trivial web application

Parameters:
  Env:
    Description: 'The deployment envionment: e.g dev, staging or prod'
    Type: String
    AllowedValues: [dev, staging, prod]
    ConstraintDescription: The deployment environment must be dev, staging or prod

  Region:
    Description: The AWS region e.g eu-west-2
    Type: String
    AllowedValues: [eu-west-1, eu-west-2, eu-west-3]
    ConstraintDescription: The region must be either eu-west-1, eu-west-2 or eu-west-3

  DbName: 
    Description: 'The database name'
    Type: String

  DbUser: 
    Description: 'The database master username'
    Type: String

  DbPass: 
    Description: 'The database master password'
    Type: String

Mappings:
  RegionToAMI:
    eu-west-1:
      AMI: ami-08fea9e08576c443b
    eu-west-2:
      AMI: ami-0055e70f580e9ae80
    eu-west-3:
      AMI: ami-09352f5c929bf417c

  Environment:
    dev:
      surfix: Dev
      dbClass: db.t3.micro
      instanceType: t2.nano
    staging:
      surfix: UAT
      dbClass: db.t3.micro
      instanceType: t2.nano
    prod:
      surfix: Prod
      dbClass: db.t4g.micro
      instanceType: t2.micro

Resources:
  CustomVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - Plus1
              - !FindInMap [Environment, !Ref Env, surfix]
              - Stack

  GateWay:
    Type: AWS::EC2::InternetGateway

  GateWayVpcAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: [CustomVpc, GateWay]
    Properties:
      VpcId: !Ref CustomVpc
      InternetGatewayId: !GetAtt GateWay.InternetGatewayId

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc
      CidrBlock: 10.0.0.0/17
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Join
        - ""
        - - !Ref Region
          - a

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Join
        - ""
        - - !Ref Region
          - a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Join
        - ""
        - - !Ref Region
          - b

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: [PrivateSubnet1, PrivateSubnet2]
    Properties:
      DBSubnetGroupDescription: Subnet group for database
      DBSubnetGroupName: SubnetGroupForPostgreSQL
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Tags: 
        - Key: Name
          Value: !Join
            - ""
            - - Plus1Temp
              - !FindInMap [Environment, !Ref Env, surfix]
              - DbSubnetGp

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: [GateWay, PublicRouteTable]
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt GateWay.InternetGatewayId
      RouteTableId: !Ref PublicRouteTable

  SubnetPublicRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: [PublicRouteTable, PublicSubnet]
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NetworkInterface:
    Type: AWS::EC2::NetworkInterface
    DependsOn: [PrivateSubnet1, WebSecurityGroup]
    Properties:
      SubnetId: !Ref PrivateSubnet1
      GroupSet: [!Ref WebSecurityGroup]

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NetworkInterface
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref NetworkInterface

  SubnetPrivateRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: [PrivateRouteTable, PrivateSubnet1]
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc
      GroupName: WebSecurityGroup
      GroupDescription: Allows HTTP, HTTPS and SSH access from any IP
      SecurityGroupIngress:
        - Description: Allow HTTP access from any IP
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - Description: Allow HTTPS access from any IP
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - Description: Allow SSH access from any IP
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  SecurityGroupForDb: 
    Type: AWS::EC2::SecurityGroup
    DependsOn: CustomVpc
    Properties:
      VpcId: !Ref CustomVpc
      GroupName: SecurityGroupForPostgreSQL
      GroupDescription: Allows HTTP, HTTPS and SSH access from any IP
      SecurityGroupIngress:
        - Description: Allow access on port 5432
          CidrIp: 10.0.0.0/16
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp      

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    DependsOn: [CustomVpc, SecurityGroupForDb]
    Properties:
      EC2VpcId: !Ref CustomVpc
      GroupDescription: Allow access on port 5432 for PosgreSQL
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref SecurityGroupForDb
          # EC2SecurityGroupOwnerId: 
          # CIDRIP: 10.0.0.0/16
  
  Database: 
    Type: AWS::RDS::DBInstance
    DependsOn: [DBSecurityGroup, DBSubnetGroup]
    Properties: 
      AllocatedStorage: 20 
      MaxAllocatedStorage: 30 
      MultiAZ: false
      PubliclyAccessible: false
      DBName: !Ref DbName
      MasterUsername: !Ref DbUser
      MasterUserPassword: !Ref DbPass 
      DBInstanceClass: !FindInMap [Environment, !Ref Env, dbClass]
      BackupRetentionPeriod: 0
      DBSecurityGroups: [!Ref DBSecurityGroup]
      VPCSecurityGroups: []
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeleteAutomatedBackups: false
      DeletionProtection: false
      Engine: "postgres"
      Tags:
        - Key: Name
          Value: !Join 
            - ""
            - - Plus1Temp
              - !FindInMap [Environment, !Ref Env, surfix]
              - DbInstance
  
  # EC2KeyPair:
  #   Type: AWS::EC2::KeyPair
  #   Properties: 
  #     KeyName: !Join 
  #       - ""
  #       - - Plus1Temp
  #         - !FindInMap [Environment, !Ref Env, surfix]
  #         - Key
  #     KeyType: rsa
  #     Tags: 
  #       - Key: Name 
  #         Value: !Join 
  #           - ""
  #           - - Plus1Temp
  #             - !FindInMap [Environment, !Ref Env, surfix]
  #             - Key
  # Server: 
  #   Type: AWS::EC2::Instance 
  #   DependsOn: EC2KeyPair 
  #   Properties: 
  #     ImageId: !FindInMap [RegionToAMI, !Ref Region, AMI]
  #     InstanceType: !FindInMap [Environment, !Ref Env, instanceType]
  #     KeyName: !Ref EC2KeyPair
  #     Monitoring: true
  #     NetworkInterfaces: []